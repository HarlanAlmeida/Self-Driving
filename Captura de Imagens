# Neste programa fazemos o carro se movimentar por uma rota traçada no mapa
# Aqui o carro reconhece a via e captura imagens para fazermos o treinamento posteriormente

#Todas as importações nocessárias para a captura de imagem

#all imports
import glob
import os
import carla #biblioteca do Carla
import time # para definir um atraso depois de cada foto
import cv2 #para trabalhar com as imagens geradas pela câmera
import numpy as np #para alterar a representação da imagem - remodelar
import math
from math import pi
import sys
try:
    sys.path.append(glob.glob('../carla/dist/carla-*%d.%d-%s.egg' % (
        sys.version_info.major,
        sys.version_info.minor,
        'win-amd64' if os.name == 'nt' else 'linux-x86_64'))[0])
    sys.path.insert(0,'C:/CARLA/carla/PythonAPI/carla')
except IndexError:
    pass
import random
from agents.navigation.global_route_planner import GlobalRoutePlanner


SHOW_RGB = False

CAMERA_POS_Z = 1.3 
CAMERA_POS_X = 1.4 

CAM_HEIGHT = 480
CAM_WIDTH = 640
FOV = 90 # Field Of View = campo de visão

YAW_ADJ_DEGREES = 15 #ângulo de rotação aleatório máximo

def camera_callback(image,data_dict):
    data_dict['image'] = np.reshape(np.copy(image.raw_data),(image.height,image.width,4))[:, :, :3]
def sem_callback(image,data_dict):
    ##########  Câmera de visão semantica ##############
    image.convert(carla.ColorConverter.CityScapesPalette)
    data_dict['sem_image'] = np.reshape(np.copy(image.raw_data),(image.height,image.width,4))[:, :, :3]

def cleanup():
    for actor in world.get_actors().filter('*vehicle*'):
        actor.destroy()
    for actor in world.get_actors().filter('*sensor*'):
        actor.destroy()

# função para obter o ângulo entre o carro e a rota traçada
def get_angle(car,wp):
    '''
    this function returns degrees between the car's direction 
    and direction to a selected waypoint
    '''
    vehicle_pos = car.get_transform()
    car_x = vehicle_pos.location.x
    car_y = vehicle_pos.location.y
    wp_x = wp.transform.location.x
    wp_y = wp.transform.location.y
    
    # vetor da rota traçada
    if ((wp_y - car_y)**2 + (wp_x - car_x)**2)**0.5 == 0:
        x=0
        y=0
    else:
        x = (wp_x - car_x)/((wp_y - car_y)**2 + (wp_x - car_x)**2)**0.5
        y = (wp_y - car_y)/((wp_y - car_y)**2 + (wp_x - car_x)**2)**0.5
        
    # vetor do carro
    car_vector = vehicle_pos.get_forward_vector()
    degrees = math.degrees(np.arctan2(y, x) - np.arctan2(car_vector.y, car_vector.x))
    # verificações extras no ângulo previsto quando valores próximos a 360 graus são retornados
    if degrees<-180:
        degrees = degrees + 360
    elif degrees > 180:
        degrees = degrees - 360
    return degrees


# última função para obter direção
def get_distant_angle(car,wp_idx,rte, delta):
    '''
    Esta função determina a direção geral
    dado o que estamos planejando fazer em um cruzamento no caminho,
    então, se estivermos dentro dos pontos delta de uma interseção
    verificamos nossa rota no cruzamento para decidir o que fazer nele
    
    '''
    if wp_idx + delta < len(rte)-1:
        i = wp_idx + delta
    else:
        i = len(rte)-1
    # verifique se há interseção
    # não encontrando resultados de curva, apenas seguimos a estrada

    intersection_detected = False
    for x in range(i-wp_idx):
        if rte[wp_idx+x][0].is_junction:
             intersection_detected = True
             intersection_ref = wp_idx+x
             break
    if not intersection_detected:
        result = 0
    else: #verificamos o cruzamento
        angles_planned = [] # esta é uma lista de ângulos em direção à saída atual da interseção
        all_angles = []
        #aqui se obtém todas as rotas definidas para uma interseção
        junction_wps = rte[intersection_ref][0].get_junction().get_waypoints(carla.LaneType.Driving)
        for wp in junction_wps:
            angle = int(get_angle(car,wp[1])) 
            if wp[1].transform.location.distance(route[intersection_ref][0].transform.location) > 20: 
                # aqui verifica todas as saídas quanto à proximidade da nossa rota para que possamos sinalizar a saída que planejamos tomar
                for i in range(intersection_ref,len(route)-1):
                    if wp[1].transform.location.distance(route[i][0].transform.location) < 5:
                        angles_planned.append(angle)
                    else:
                        all_angles.append(angle)
        angles_planned = list(set(angles_planned))
        all_angles = list(set(all_angles))
        alternative_angles = [item for item in all_angles if item not in angles_planned] 
        if len(alternative_angles) == 0 or len(angles_planned) == 0:
            result = 0
        elif min(angles_planned)<-25 and (min(alternative_angles) > min(angles_planned)):
            # para virar à esquerda
            result = -1
        elif max(angles_planned)>25 and (max(alternative_angles) < max(angles_planned)):
             # para virar à direita
            result = 1
        else:
             # para seguir reto
            result = 0  
    return result

def draw_route(wp, route,seconds=5.0):
    #desenha a rota dos próximos pontos na janela do simulador - observe que isso não acontece, é só para visão do carro
    if len(route)-wp <25: # rota a 25 pontos do final fica em vermelho
        draw_colour = carla.Color(r=255, g=0, b=0)
    else:
        draw_colour = carla.Color(r=0, g=0, b=255)
    for i in range(50):
        if wp+i<len(route)-2:
            world.debug.draw_string(route[wp+i][0].transform.location, '^', draw_shadow=False,
                color=draw_colour, life_time=seconds,
                persistent_lines=True)
    return None


def select_random_route(position,locs):
    '''
    retorna uma rota aleatória para o carro/veículo
    fora da lista de locais possíveis
    onde a distância é maior que 100 waypoints
    '''    
    point_a = position.location # começamos onde o carro está ou último ponto de referência
    sampling_resolution = 1
    grp = GlobalRoutePlanner(world.get_map(), sampling_resolution)
    # aqui pegamos a maior rota possível
    min_distance = 100
    result_route = None
    route_list = []
    for loc in locs: # começamos tentando todos o pontos gerados 
                                
        cur_route = grp.trace_route(point_a, loc.location)
        if len(cur_route) > min_distance:
            route_list.append(cur_route)
    result_route = random.choice(route_list)
    return result_route

client = carla.Client('localhost', 2000)
time.sleep(5)
client.set_timeout(25)

# Obtendo o mapa
world = client.get_world()

 
settings = world.get_settings()
settings.synchronous_mode = False
settings.no_rendering_mode = True
if settings.synchronous_mode:
    settings.fixed_delta_seconds = 0.05
world.apply_settings(settings)

cleanup()
spawn_points = world.get_map().get_spawn_points()

quit = False
while not quit:
    start_point = random.choice(spawn_points)
    vehicle_bp = world.get_blueprint_library().filter('*model3*')
    vehicle = world.try_spawn_actor(vehicle_bp[0], start_point)
    time.sleep(2)
 
    #RGB CAM
    camera_bp = world.get_blueprint_library().find('sensor.camera.rgb')
    camera_bp.set_attribute('image_size_x', str(CAM_WIDTH)) # também funciona no CARLA 9.14 para Windows
    camera_bp.set_attribute('image_size_y', str(CAM_HEIGHT))
    camera_bp.set_attribute('fov', str(FOV))
    camera_init_trans = carla.Transform(carla.Location(z=CAMERA_POS_Z,x=CAMERA_POS_X))
    
    #Aqui criamos a câmera no simulador
    camera = world.spawn_actor(camera_bp,camera_init_trans,attach_to=vehicle)
    image_w = camera_bp.get_attribute('image_size_x').as_int()
    image_h = camera_bp.get_attribute('image_size_y').as_int()
    camera_data = {'image': np.zeros((image_h,image_w,3)),
                'sem_image': np.zeros((image_h,image_w,3))}
    
    # Esse comando abre uma tela da visão do carro
    camera.listen(lambda image: camera_callback(image,camera_data))

    #Semantic cam
    sem_camera_bp = world.get_blueprint_library().find('sensor.camera.semantic_segmentation')
    sem_camera_bp.set_attribute('image_size_x', str(CAM_WIDTH)) # também funciona na versão CARLA 9.14 no Windows
    sem_camera_bp.set_attribute('image_size_y', str(CAM_HEIGHT))
    sem_camera_bp.set_attribute('fov', str(FOV))
    
    #cria a câmero no simulador
    sem_camera = world.spawn_actor(sem_camera_bp,camera_init_trans,attach_to=vehicle)
    image_w = sem_camera_bp.get_attribute('image_size_x').as_int()
    image_h = sem_camera_bp.get_attribute('image_size_y').as_int()
    sem_camera_data = {'image': np.zeros((image_h,image_w,3))}
    
    # Live stream da câmera
    sem_camera.listen(lambda image: camera_callback(image,sem_camera_data))
    sem_camera.listen(lambda image: sem_callback(image,camera_data))

    if SHOW_RGB:
        cv2.namedWindow('RGB Camera',cv2.WINDOW_AUTOSIZE)
        cv2.imshow('RGB Camera',camera_data['image'])
    #traça a rota
    route = select_random_route(start_point,spawn_points)
    gen_dir_angle = 0 # para o caso de não obter umaa direção genérica do GPS
    for idx, waypoint in enumerate(route): # move o carro pelo percurso
        
        transform = waypoint[0].transform
        vehicle.set_transform(transform)
        vehicle.apply_control(carla.VehicleControl(throttle=0, steer=0, brake=1))
        time.sleep(2) #esses atrasos são necessários para que o carro tome a posição antes de uma foto ser tirada
        initial_yaw = waypoint[0].transform.rotation.yaw
        # A direção geral do GPS só é obtida fora dos cruzamentos
        # para que a direção seja mantida ao longo da mesma interseção até que ela termine
        if not waypoint[0].is_intersection and not waypoint[0].is_junction:
            gen_dir_angle = get_distant_angle(vehicle,idx,route,30) # ângulo geral obtido antes de virar o carro
        # lógica para detectar uma mudança de faixa e ignorar/não tirar essas imagens
        draw_route(idx, route,seconds=5.0)
        lane_change = False
        if not waypoint[0].is_intersection and not waypoint[0].is_junction:
            if idx < len(route)-2:
                if route[idx][0].lane_id != route[idx+1][0].lane_id:
                    lane_change = True
        if lane_change: # mudanças de faixa são tratadas como curvas na direção
            if get_angle(vehicle,route[idx+1][0])<0:
                gen_dir_angle = -1
            else:
                gen_dir_angle = 1

        for i in range(5):
            trans = waypoint[0].transform
            angle_adj = random.randrange(-YAW_ADJ_DEGREES, YAW_ADJ_DEGREES, 1)
            trans.rotation.yaw = initial_yaw +angle_adj 
            vehicle.set_transform(trans)
            vehicle.apply_control(carla.VehicleControl(throttle=0, steer=0, brake=1))
            time.sleep(1)  #esses atrasos são necessários para que o carro tome a posição antes de tirar uma foto
            
            # Display
            if SHOW_RGB:
                cv2.imshow('RGB Camera',camera_data['image'])
            # salvar a imagem observando o final da rota    
            if idx +5 < len(route)-1:
                predicted_angle = get_angle(vehicle,route[idx+5][0]) # sempre obtemos o ângulo para +5 waypoints à nossa frente
                
                time_grab = time.time_ns()
                sem_image = camera_data['sem_image']
                if np.sum(sem_image) > 0:   #checando imagens totalmente em preto
                    cv2.imwrite('_img/%06d_%s_%s.png' % (time_grab, gen_dir_angle,round(predicted_angle,0)), sem_image)
    cleanup()
    if quit:
        break
    # para encerrar a captura pressione q - mas também pode só fechar o Carla
cv2.destroyAllWindows()
cleanup()
